<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--    所以 base.xml 提供了一套通用的 Logback 配置作为基础,然后在应用的 Logback 配置文件中通过 <include> 来导入这些通用设置。-->
    <!--    这么做的好处有:-->
    <!--    避免在每个项目中重复配置通用日志设置-->
    <!--    Logback 配置可以关注应用自定义的部分,比如日志级别、自定义 Appender 等-->
    <!--    当升级 Spring Boot 版本时,可以自动获取到最新的 Logback 通用配置。include 可以复用基础日志xml更加简洁-->
    <!--    Spring Boot 在打包过程中,会从 spring-boot-${version}.jar 这个jar包中提取 base.xml 文件,并打包到应用的classpath中。-->
    <!--    但是这个过程是在打包时发生的,在IDE开发的时候,base.xml 文件还没有被提取出来,所以IDE无法直接找到它。-->
    <!--    这也是为什么 logback.xml 配置可以成功引用 base.xml,但点击跳转却失败的原因。-->
    <!--    有下面这行include标签能让日志的INFO 线程 包类信息编程彩色！！！！！！！！！-->
    <include resource="org/springframework/boot/logging/logback/base.xml" />
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
<!--    <property name="LOG_HOME" value="${log.path}" />-->
    <springProperty scope="context" name="LOG_HOME" source="log.path" defaultValue="/app/smartyunst/logs/adapter" />
    <!-- 控制台输出 -->
    <appender name="Stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志输出格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 [%method,%line]显示代码行号 %msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} traceId:%X{traceId} [%thread] %-5level %logger{50} [%method,%line]- %msg%n</pattern>
        </layout>
        <!--        <encoder>-->
        <!--            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 [%method,%line]显示代码行号 %msg：日志消息，%n是换行符&ndash;&gt;-->
        <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} [%method,%line]- %msg%n</pattern>-->

        <!--            &lt;!&ndash; 配置不同级别日志的颜色 &ndash;&gt;-->
        <!--            <highlight class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
        <!--                <pattern>-->
        <!--                    <style level="ERROR" value="%red(%msg)%n" />-->
        <!--                    <style level="WARN" value="%yellow(%msg)%n" />-->
        <!--                    <style level="INFO" value="%green(%msg)%n" />-->
        <!--                    <style level="DEBUG" value="%blue(%msg)%n" />-->
        <!--                </pattern>-->
        <!--            </highlight>-->
        <!--        </encoder>-->
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="RollingFile"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/adapter.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/history/adapter-%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            <MaxHistory>30</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志文件最大的大小 和 timeBasedFileNamingAndTriggeringPolicy冲突-->
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            <MaxFileSize>10MB</MaxFileSize>-->
        <!--        </triggeringPolicy>-->
        <!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
        <!--            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息， [%method,%line]显示代码行号 %n是换行符&ndash;&gt;-->
        <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} traceId:%X{traceId} [%thread] %-5level %logger{50} [%method,%line] - %msg%n-->
        <!--            </pattern>-->
        <!--            &lt;!&ndash; 与encoder里面的pattern互相冲突覆盖 &ndash;&gt;-->
        <!--        </layout>-->
        <encoder class="com.mashibing.internal.common.config.logback.MyLogbackPatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>
                [%d{yyyy-MM-dd
                HH:mm:ss.SSS}][%thread][%X{traceId}][%level][smartyunst][smartyunst-adapter][]-[%-4relative%logger{35}:%line - %msg]%n
            </pattern>

            <!-- 日志字符集（默认ISO-8859-1） -->
            <charset>UTF-8</charset>
            <!-- 开启脱敏（默认false） -->
            <sensitive>true</sensitive>
            <!-- 脱敏规则列表 -->
            <replaces>
                <!-- 脱敏规则 -->
                <replace>
                    <!-- 11位的手机号：保留前3后4 -->
                    <regex>
                        <![CDATA[(mobile|phone|手机号)(=|=\[|\":\"|:|：|='|':')(1)([3-9]{2})(\d{4})(\d{4})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2$3$4****$6$7</replacement>
                </replace>
                <replace>
                    <!-- 固定电话： XXXX-XXXXXXXX或XXX-XXXXXXXX，保留区号+前2后2 -->
                    <regex>
                        <![CDATA[(tel|座机)(=|=\[|\":\"|:|：|='|':')([\d]{3,4}-)(\d{2})(\d{4})(\d{2})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2$3$4****$6$7</replacement>
                </replace>
                <replace>
                    <!-- 地址：汉字+字母+数字+下划线+中划线，留前3个汉字 -->
                    <regex>
                        <![CDATA[(地址|住址|address)(=|=\[|\":\"|:|：|='|':')([\u4e00-\u9fa5]{3})(\w|[\u4e00-\u9fa5]|-)*(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2$3****$5</replacement>
                </replace>
                <replace>
                    <!-- 19位的卡号，保留后4 -->
                    <regex>
                        <![CDATA[(cardNo|卡号)(=|=\[|\":\"|:|：|='|':')(\d{15})(\d{4})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2***************$4$5</replacement>
                </replace>
                <replace>
                    <!-- 姓名,2-4汉字，留前1-->
                    <regex>
                        <![CDATA[(name|姓名)(=|=\[|\":\"|:|：|='|':')([\u4e00-\u9fa5]{1})([\u4e00-\u9fa5]{1,3})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2$3**$5</replacement>
                </replace>
                <replace>
                    <!--  密码 6位数字，全* -->
                    <regex>
                        <![CDATA[(password|密码|支付密码)(=|=\[|\":\"|:|：|='|':')(.{1,16})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2******$4</replacement>
                </replace>
                <replace>
                    <!--  验证码 6位数字，全* -->
                    <regex>
                        <![CDATA[(验证码)(=|=\[|\":\"|:|：|='|':')(\d{6})(\]|\"|'|)]]>
                    </regex>
                    <replacement>$1$2******$4</replacement>
                </replace>
                <replace>
                    <!-- 身份证，18位（结尾为数字或X、x），保留前1后1 -->
                    <regex>
                        <![CDATA[(身份证号|idCard)(=|=\[|\":\"|:|：|='|':')(\d{1})(\d{16})([\d|X|x]{1})(\]|\"|)]]>
                    </regex>
                    <replacement>$1$2$3****************$5$6</replacement>
                </replace>
                <replace>
                    <!-- 邮箱，保留@前的前1后1 -->
                    <regex>
                        <![CDATA[(\w{1})(\w*)(\w{1})@(\w+).com]]>
                    </regex>
                    <replacement>$1****$3@$4.com</replacement>
                </replace>
            </replaces>
        </encoder>
    </appender>

    <!--  异步日志记录  -->
<!--    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">-->
<!--        <appender-ref ref="RollingFile"/>-->
<!--    </appender>-->


    <!-- 6.【强制】对于 trace / debug / info 级别的日志输出，必须进行日志级别的开关判断：
    说明：虽然在 debug(参数) 的方法体内第一行代码 isDisabled(Level.DEBUG_INT) 为真时（Slf4j 的常见实现 Log4j 和
    Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果 debug(getName()) 这种参数内有
    getName() 方法调用，无谓浪费方法调用的开销。
    正例：
    // 如果判断为真，那么可以输出 trace 和 debug 级别的日志
    if (logger.isDebugEnabled()) {
        logger.debug("Current ID is: {} and name is: {}", id, getName());
    }
    -->

    <!-- 关闭 DEBUG级别的org.apache.http.文件流网络流日志   -->
    <logger name="org.apache" level="WARN"/>
    <logger name="httpclient" level="WARN"/>

    <!-- 日志输出级别和日志的输出方式 -->
    <root level="INFO">
        <appender-ref ref="Stdout" />
        <!-- <appender-ref ref="RollingFile" />-->
    </root>

    <!--开发环境:打印控制台-->
    <springProfile name="dev">
<!--        <logger name="com.allinpay.industry.channel.adapter" level="INFO" additivity="false">-->
<!--            <appender-ref ref="Stdout" />-->
<!--            <appender-ref ref="async" />-->
<!--        </logger>-->
<!--        <logger name="com.allinpay.smartyunst.common" level="INFO" additivity="false">-->
<!--            <appender-ref ref="Stdout" />-->
<!--            <appender-ref ref="async" />-->
<!--        </logger>-->
    </springProfile>
    <!--测试环境:打印控制台-->
    <springProfile name="mer">
    </springProfile>
    <!--生产环境:打印控制台-->
    <springProfile name="prod">
        <logger name="com.allinpay.industry.channel.adapter" level="info"/>
        <logger name="java.sql.Connection" level="info"/>
        <logger name="java.sql.Statement" level="info"/>
        <logger name="java.sql.PreparedStatement" level="info"/>
        <logger name="org.springframework.web" level="info"/>>
    </springProfile>

    <!--  7.【强制】避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 additivity=false
    正例：<logger name="com.taobao.dubbo.config" additivity="false">
      -->
    <!--    <logger name="com.allinpay.industry.channel.adapter" level="INFO" additivity="true">-->
    <!--        <appender-ref ref="Stdout" />-->
    <!--    </logger>-->
    <!--    <logger name="com.example.demo" level="DEBUG"></logger>-->

    <!--日志异步到数据库 -->
    <!--<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
            日志异步到数据库
            <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
               连接池
               <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                  <driverClass>com.mysql.jdbc.Driver</driverClass>
                  <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
                  <user>root</user>
                  <password>root</password>
                </dataSource>
            </connectionSource>
      </appender> -->
</configuration>