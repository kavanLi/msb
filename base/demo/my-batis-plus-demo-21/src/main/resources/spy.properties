# 定义日志文件的位置 使用 Slf4JLogger 将日志输出到 SLF4J。你可以在 Logback 或 Log4J 的配置文件中进一步控制日志的输出方式。 生产环境：把日志托管给SLF4J可以更好地控制日志的级别、格式、位置等。
# 需要配置logback.xml
appender=com.p6spy.engine.spy.appender.Slf4JLogger
# 配置异步日志 将日志记录设置为异步，减少对主线程的阻塞。
# appender=com.p6spy.engine.spy.appender.AsyncAppender

# 设置日志级别 设置日志记录的级别，通常可以设置为 DEBUG 或 TRACE 以获取更多详细信息。对于生产环境，通常设置为 INFO。
loglevel=DEBUG

# 记录 SQL 日志 使其包含连接 ID、方法、SQL 语句和执行时间等信息。这对于调试和性能分析很有帮助。
logMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormat

# 自定义日志格式
# %(connectionId) 用于在日志中插入与当前 SQL 语句相关联的数据库连接的 ID。这个 ID 可以帮助你追踪和调试同一连接上执行的多个 SQL 语句。如果你有多个数据库连接同时在工作，%(connectionId) 可以帮助你区分这些连接的 SQL 操作。例如，如果你看到日志中有 connection:0，这意味着这是连接 ID 为 0 的连接执行的 SQL 语句。
# %(method) 用于在日志中插入执行 SQL 操作的方法名称。这可以帮助你了解哪个方法（如 executeQuery 或 executeUpdate）在执行 SQL 语句。
customLogMessageFormat=connection:%(connectionId) | %(method) | Consume Time：%(executionTime)ms | Execute SQL: \n%(sql)\n

# 记录SQL语句执行时间
loggable=true

# 是否记录包含BLOB/CLOB类型的操作
includeExclude=true

# 取消 JDBC URL 前缀：去掉 JDBC URL 前缀 jdbc:p6spy:，使其在日志中显示原始 URL。
useprefix=true

# 排除不需要记录的日志类别，减少日志文件的大小。可以排除某些 SQL 语句类型的记录，例如提交（commit）和回滚（rollback），减少日志噪音。
excludecategories=info,debug,result,commit,resultset

# 日期格式
dateformat=yyyy-MM-dd HH:mm:ss

# 是否开启慢SQL记录 可以创建一个自定义的 P6Spy 日志记录器实现，将通过逻辑编码将慢查询日志信息写入数据库。但侵入性强影响性能没必要。
outagedetection=true

# 慢SQL记录标准 2 秒 设置阈值为 2 秒，记录超过 2 秒的 SQL 操作。
outagedetectioninterval=2

# 这个配置项用于定义 P6Spy 在运行时所加载的模块（也称为模块列表）。这些模块通常用于扩展 P6Spy 的功能或者提供额外的日志输出功能
# modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory

# 是否使用代理驱动
deregisterdrivers=true

# 实际驱动可多个
#driverlist=org.h2.Driver

# 限制 SQL 语句的最大长度 指定 SQL 语句的最大长度，防止日志中出现过长的 SQL 语句。默认值通常较长，这里设置为 2048 字符。
# maxsql=2048

# 日志文件路径 (如果不使用 SLF4J 输出)
#logfile=spy.log